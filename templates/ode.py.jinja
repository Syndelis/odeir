import numpy as np
def system( t: np.float64, y: np.ndarray, *constants) -> np.ndarray:
    # populations
    {% for arg in populations -%}
        {{- arg.name }}, {%- endfor %} = y

    # constants
    {%- if constants %}
    {% for arg in constants -%}
    {{- arg.name }},
{%- endfor %} = constants
    {% endif -%}

{%- macro display_composite(arg) %}
    {%- for comp in arg.composition -%}
        {%- if comp.contribution|trim != '+' -%} {{ comp.contribution }} {% endif -%}
        {%- if comp.value is defined -%} {{ comp.value }}
        {%- else -%} 
            {%- set a = model.arguments[comp.name] -%}
            {%- if a.value is defined -%} {{- a.name }}
            {%- else -%} ({{- display_composite(a) -}})
            {%- endif -%}
        {%- endif -%}
        {%- if not loop.last %} {{ arg.operation }} {% endif -%}
    {%- endfor %} {% endmacro -%}

{% for pop in populations %}
    {%- set comp = model.arguments[equations[pop.name].argument] %}
    d{{ pop.name }} = {{ display_composite(comp) }}
{%- endfor %}

    return np.array([
    {%- for arg in populations -%}
            d{{ arg.name }} {%- if not loop.last %}, {%- endif -%} {% endfor %}])
