import argparse, contextlib, sys, os
import scipy
import numpy as np

{% if extensions -%}
# User extensions
def node(func=None, format=None):
    if func is None and format is not None:
        def inner(inners_func):
            return inners_func

        return inner

    else:
        return func

{% for ext in extensions -%}
{{- ext -}}
{%- endfor -%}
{%- endif %}

def initial_values() -> np.ndarray:
    {% for arg in populations -%}
        {{- arg.name }}_0 = {{ arg.value }}
    {% endfor -%}

    return np.array((
        {% for arg in populations -%}
            {{- arg.name }}_0,
        {% endfor -%}
    ))


def constants() -> list:
    {% for constant in constants -%}
        {{- constant.name }} = {{ constant.value }}
    {% endfor -%}

    return [
        {% for constant in constants -%}
            {{- constant.name }},
        {% endfor -%}
    ]


def variable_names() -> list[str]:
    return [
        {% for arg in populations -%}
            "{{- arg.name }}",
        {% endfor -%}
    ]


def system(t: np.float64, y: np.ndarray, *constants) -> np.ndarray:
    # populations
    {% for arg in populations -%}
        {{- arg.name }}, {%- endfor %} = y

    {%- if constants %}
    # constants
    {% for arg in constants -%}
    {{- arg.name }},
{%- endfor %} = constants
    {% endif -%}

{%- macro display_composite(arg) %}
    {%- if arg.style == "Prefixed" -%} {{ arg.operation }}({%- endif -%}
    {%- for comp in arg.composition -%}
        {%- if comp.contribution|trim != '+' -%} {{ comp.contribution }} {% endif -%}
        {%- if comp.value is defined -%} {{ comp.value }}
        {%- else -%}
            {%- set a = model.arguments[comp.name] -%}
            {%- if a.value is defined -%} {{- a.name }}
            {%- else -%} ({{- display_composite(a) -}})
            {%- endif -%}
        {%- endif -%}
        {%- if not loop.last -%}
            {%- if arg.style == "Prefixed" -%},{%- else -%}{{ arg.operation }}{%- endif -%}
        {%- else -%}
        {%- if arg.style == "Prefixed" -%}){%- endif -%}
        {%- endif -%}
    {%- endfor %} {% endmacro -%}

{% for pop in populations %}
    {%- set comp = model.arguments[equations[pop.name].argument] %}
    d{{ pop.name }}_dt = {{ display_composite(comp) }}
{%- endfor %}

    return np.array([
    {%- for arg in populations -%}
            d{{ arg.name }}_dt {%- if not loop.last %}, {%- endif -%} {% endfor %}])


def simulation_output_to_csv(sim_steps, simulation_output, write_to) -> str:
    if not simulation_output.success:
        print(simulation_output.message)
        return

    populatio_values_per_dt = simulation_output.y.T

    write_to.write(f"t,{','.join(variable_names())}\n")

    for dt, y in zip(sim_steps, populatio_values_per_dt):
        write_to.write(f"{dt},")
        write_to.write(",".join(f"{val:.4f}" for val in y))
        write_to.write("\n")


def plot_simulation(sim_steps, simulation_output, filename):
    import matplotlib.pyplot as plt
    from matplotlib.backends.backend_pdf import PdfPages

    with PdfPages(filename) as pdf:
        # All
        all_fig, all_ax = plt.subplots()
        all_ax.grid()
        all_ax.set(title=__name__, xlabel="Time", ylabel="Concentration")

        # Individually
        for variable_name, variable_line_data in zip(variable_names(), simulation_output.y):
            fig, ax = plt.subplots()
            ax.grid()

            ax.set(
                title=variable_name,
                xlabel="Time",
                ylabel="Concentration",
            )

            ax.plot(simulation_output.t, variable_line_data)
            all_ax.plot(simulation_output.t, variable_line_data)

            pdf.savefig(fig)

        pdf.savefig(all_fig)


def file_or_stdout(filename: str | None):
    if filename:
        return open(filename, 'w')
    else:
        return sys.stdout


def simulate(filename, st=0, tf=10, dt=0.1, plot=False):
    sim_steps = np.arange(st, tf + dt, dt)

    simulation_output = scipy.integrate.solve_ivp(
        fun=system,
        t_span=(0, tf + dt),
        y0=initial_values(),
        args=constants(),
        t_eval=sim_steps,
    )

    if plot:
        plot_simulation(sim_steps, simulation_output, filename)

    else:
        with file_or_stdout(filename) as f:
            simulation_output_to_csv(sim_steps, simulation_output, f)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("--st", type=float, default=0)
    parser.add_argument("--tf", type=float, default=10)
    parser.add_argument("--dt", type=float, default=0.1)
    parser.add_argument("-o", "--output", default=None)
    parser.add_argument("--csv", action=argparse.BooleanOptionalAction)

    args = parser.parse_args()

    if args.output is None and not args.csv:
        parser.error("when plotting (a.k.a --no-csv), an output file name is required via --output")

    if args.output:
        dirs = os.path.dirname(args.output)

        if dirs:
            os.makedirs(dirs, exist_ok=True)

    simulate(args.output, plot=not args.csv)
